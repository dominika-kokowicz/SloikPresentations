//:[Spis TreÅ›ci](Spis_Tresci) | [Wstecz](@previous) | [NastÄ™pna strona](@next)
/*:
 > # GCD Dispatch Groups
 */

import Foundation
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

//: Sprawdzanie zakoÅ„czenia pojedyÅ„czego tasku jest banalnie proste (wystarczy dodaÄ‡ takÄ… informaje na koniec wrzuconego bloku i gotowe). Co w sytuacji gdy mamy tych zadaÅ„ duÅ¼o i chcemy siÄ™ dowiedzieÄ‡ gdy wszystkie siÄ™ zakoÅ„czÄ…? CaÅ‚e szczÄ™Å›cie z pomocÄ… nadchodzÄ… grupy :)
//: ## Tworzymy Grupe
let grupaA = DispatchGroup()

//: Åšwietnie nam idzie. Zrobmy jeszcze jedna.

let grupaB = DispatchGroup()

//: Potrzebujemy kolejki na ktorej bedziemy uruchamiac nazsze zadania
let systemowaKolejka = DispatchQueue.global(qos: .background)
let seryjnaKolejka   = DispatchQueue.init(label: "Seryjne Kolejka1")

//: ## Notyfikaca o Zakonczeniu Wszystkich Zadan w Grupie
//: Zadania w grupie moga siÄ™ znajdowaÄ‡ w roznych kolejkach.

xtimeBlock("Wszystkie Zadania Skonczone") {
    
    systemowaKolejka.async(group: grupaA) {
        print("To Å¼yje 1 -> Glowny watek: \(Thread.isMainThread)")
    }
    
    seryjnaKolejka.async(group: grupaA) {
        sleep(3)
        print("To Å¼yje 2 -> Glowny watek: \(Thread.isMainThread)")
    }
    
    grupaA.notify(queue: DispatchQueue.main) {
        print("Na obu kolejkach robota skonczona :) -> Glowny watek: \(Thread.isMainThread)")
    }
    
    print("\nPrzed czekaniem na grupe A")
    grupaA.wait(timeout: DispatchTime.distantFuture)
    print("Po czekaniu na grupe A")
}

//: Dispatch Group Enter / Leave
//: JeÅ¼eli uÅ¼ywamy metod asynchronicznych to z punktu widzenia grupy zadanie siÄ™ wykonaÅ‚o (doszÅ‚o do koÅ„ca wykonywanej funkcji). ChociaÅ¼ tak na prawdÄ™ moÅ¼e oczekiwaÄ‡ np na odpowiedÅº z serwera lub zakoÅ„czenie innego asynchronicznego zadania.

xtimeBlock("Problem Przy Asynchronicznych Metodach") {
    
    systemowaKolejka.async(group: grupaA) {
        Asynchroniczny().zobaczCoSieStanie {
            DispatchQueue.main.async {
                print("Robota Ogarnieta  -> Glowny watek: \(Thread.isMainThread)")
            }
        }
    }
    
    grupaA.notify(queue: DispatchQueue.main) {
        print("Wszystkie zadania w grupie wykonane ðŸ’¥")
    }
}

//: RozwiÄ…zaniem jest "reczne" oznaczenie w ktÃ³rym momencie zadanie **wchodzi** do grupy i w ktÃ³rym **wychodzi**.
xtimeBlock("Rozwiazanie Przy Asynchronicznych Metodach") {
    
    grupaA.enter()
    systemowaKolejka.async {
        Asynchroniczny().zobaczCoSieStanie {
            DispatchQueue.main.async {
                print("Robota Ogarnieta  -> Glowny watek: \(Thread.isMainThread)")
            }
            
            grupaA.leave()
        }
    }
    
    grupaA.notify(queue: DispatchQueue.main) {
        print("Wszystkie zadania w grupie wykonane ðŸ˜Ž")
    }
}

//: [Wstecz](@previous) | [NastÄ™pna strona](@next)
