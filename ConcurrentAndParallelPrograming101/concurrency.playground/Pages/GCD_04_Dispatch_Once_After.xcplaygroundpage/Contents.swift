//:[Spis Tre≈õci](Spis_Tresci) | [Wstecz](@previous) | [Nastƒôpna strona](@next)
/*:
 > # Raz i Po / dispatch_once / dispatch_after
 */

import Foundation
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

//: ## Dispatch Once
//: Czasami chcemy aby jaki≈õ kod przez czas ≈ºycia programu wykona≈Ç siƒô dok≈Çadnie raz. W Swift 3 metoda dispatch_once() znana ze wcze≈õniejszych wersji jak i z ObjC przesta≈Ça istnieƒá.
//:
//: *The free function dispatch_once is no longer available in Swift. In Swift, you can use lazily initialized globals or static properties and get the same thread-safety and called-once guarantees as dispatch_once provided.* [Dokumentacja](https://swift.org/migration-guide/)

xtimeBlock("Tylko Raz") {
    
    class TylkoRaz {
        static var raz: () = {
            print("Akcja")
        }()
        
        func wtf() {
            TylkoRaz.raz
        }
    }
    
    for _ in 1...50000 {
        Thread.init{
            TylkoRaz.raz
        }

        TylkoRaz.init().wtf()
    }
}

//: ## Dispatch After
//: Gdy chcemy aby jakie≈õ zadanie zosta≈Ço wykonane po pewnym czasie to GCD nam to umo≈ºliwia. Co bardzo fajne sk≈Çadnia siƒô nieco uzywilizowa≈Ça w Swift 3.

xtimeBlock("Po") {
    
    let start = Date()
    print("Start: \(start)")
    
    DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(2)) {
        print("üòé Wywo≈Çane po czasie: \(Date().timeIntervalSince(start))")
    }
    
    print("Stop: \(Date().timeIntervalSince(start))")
    
}


//: [Wstecz](@previous)
